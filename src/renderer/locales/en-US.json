{
	"roles": {
		"maintainer": "Maintainer",
		"reviewer": "Reviewer",
		"director": "Director",
		"contributor": "Contributor"
	},
	"common": {
		"title": "I18n Test",
		"loading": "Loading...",
		"save": "Save",
		"cancel": "Cancel",
		"submitting": "Submitting...",
		"confirm": "Confirm",
		"delete": "Delete",
		"edit": "Edit",
		"create": "Create",
		"upload": "Upload",
		"download": "Download",
		"search": "Search",
		"close": "Close",
		"open": "Open",
		"back": "Back",
		"next": "Next",
		"previous": "Previous",
		"submit": "Submit",
		"reset": "Reset",
		"refresh": "Refresh",
		"refreshing": "Refreshing...",
		"copy": "Copy",
		"paste": "Paste",
		"cut": "Cut",
		"undo": "Undo",
		"redo": "Redo",
		"help": "Help",
		"settings": "Settings",
		"about": "About",
		"version": "Version",
		"language": "Language",
		"theme": "Theme",
		"dark": "Dark",
		"light": "Light",
		"error": "An error occurred",
		"retry": "Retry",
		"noData": "No data available",
		"success": "Operation successful",
		"info": "Information",
		"warning": "Warning",
		"action": "Action",
		"add": "Add",
		"remove": "Remove",
		"actions": "Actions",
		"preview": "Preview",
		"processing": "Processing..."
	},
	"navigation": {
		"dashboard": "Dashboard",
		"projectDetail": "Project Detail",
		"reviews": "Reviews",
		"maintainers": "Maintainers",
		"discussions": "Discussions",
		"issues": "Issues",
		"settings": "Settings"
	},
	"login": {
		"title": "Login",
		"pageTitle": "Login - DIPCP",
		"subtitle": "Decentralized Intellectual Property Collaboration Platform",
		"whyChoose": "Why Choose DIPCP?",
		"feature1": "✅ Zero Ops Cost, No Server Required",
		"feature2": "✅ Zero Learning Cost, Open and Use",
		"feature3": "✅ Zero Barrier, Only GitHub Account Required",
		"feature4": "✅ Completely Transparent, Fully Traceable",
		"repositoryUrl": "Repository URL",
		"loginButton": "Login",
		"loggingIn": "Logging in...",
		"placeholders": {
			"githubUsername": "GitHub username",
			"accessToken": "GitHub Access Token (not password!)"
		},
		"howToRegister": "How to Register",
		"howToGetToken": "How to Get Token",
		"registerHelpTitle": "How to Register a GitHub Account",
		"registerHelpContent": "<h3>Step 1: Visit GitHub</h3><p>Open your browser and go to <a href='https://github.com' target='_blank'>https://github.com</a></p><br><h3>Step 2: Click Sign Up</h3><p>Click the <strong>Sign up</strong> button in the top right corner of GitHub homepage</p><br><h3>Step 3: Fill Registration Info</h3><p>• Enter username<br>• Enter email address<br>• Set password<br>• Verify you're not a robot</p><br><h3>Step 4: Verify Email</h3><p>Check your email and click the verification link sent by GitHub</p><br><h3>Step 5: Complete Registration</h3><p>After verification, you can start using your GitHub account!</p>",
		"tokenHelpTitle": "How to Get GitHub Personal Access Token",
		"tokenHelpContent": "<h3>Quick Token Access</h3><p>Go directly to: <a href='https://github.com/settings/tokens' target='_blank'><strong>https://github.com/settings/tokens</strong></a></p><br><h3>Generate Steps</h3><p>• Click <strong>Generate new token</strong> → <strong>Generate new token (classic)</strong><br>• Fill Note: DIPCP Application<br>• Select Expiration: <strong>Recommend 'Never' (no expiration)</strong><br>• <strong>Important: Check ALL permission options (select all)</strong><br>• Click <strong>Generate token</strong></p><br><h3>Copy Token</h3><p>• <strong>Copy and save the token immediately</strong> (only shown once)<br>• Paste the token into the Token field on login page</p><br><p><strong>Note:</strong> Token is only shown once, please save it carefully!</p>",
		"terms": "By logging in, you agree to our",
		"termsLink": "Terms of Service",
		"and": "and",
		"privacyLink": "Privacy Policy",
		"authorization": "First login requires authorization to access your GitHub account information",
		"loginSuccess": "Login successful",
		"loginFailed": "Login failed",
		"invalidCredentials": "Invalid username or access token",
		"repositoryNotFound": "Repository not found or inaccessible",
		"networkError": "Network connection error",
		"loading": "Verifying user information...",
		"verifying": "Verifying...",
		"legal": {
			"termsText": "By logging in, you agree to our",
			"termsLink": "Terms of Service",
			"privacyText": "and",
			"privacyLink": "Privacy Policy"
		},
		"validation": {
			"usernameRequired": "Please enter GitHub username",
			"usernameMinLength": "Username must be at least 2 characters",
			"usernameInvalidChars": "Username can only contain letters, numbers, underscores and hyphens",
			"usernameMismatch": "Username mismatch: Token belongs to \"{tokenUser}\" but you entered \"{inputUser}\"",
			"accessTokenRequired": "Please enter GitHub access token",
			"accessTokenInvalid": "Please enter a valid GitHub access token",
			"repositoryRequired": "Please enter repository URL",
			"repositoryInvalid": "Please enter a valid GitHub repository URL",
			"formInvalid": "Please fill in all required fields",
			"invalidToken": "GitHub Access Token is invalid or expired, please check your Token"
		},
		"messages": {
			"loginInProgress": "Logging in...",
			"loginSuccessRedirect": "Login successful! Redirecting...",
			"githubVerificationFailed": "GitHub account verification failed: ",
			"repositoryCloneFailed": "Repository clone failed: ",
			"connectingToGitHub": "Connecting to GitHub...",
			"validatingRepository": "Validating repository...",
			"downloadingFiles": "Downloading repository files...",
			"settingUpWorkspace": "Setting up workspace...",
			"downloadComplete": "File download completed",
			"invalidRepositoryUrl": "Invalid repository URL",
			"dataSyncComplete": "Data sync completed!",
			"dataSyncFailedButLoginSuccess": "Data sync failed, but login successful"
		},
		"settingUp": {
			"initialFiles": "Creating initial files...",
			"workflows": "Creating GitHub Actions workflows...",
			"branchProtection": "Setting up branch protection...",
			"codeOwners": "Setting up CODEOWNERS...",
			"actionsPermissions": "Setting up Actions permissions...",
			"workflowPermissions": "Setting up Workflow permissions...",
			"secrets": "Creating secrets...",
			"checkingRepository": "Checking repository type...",
			"creatingOrganization": "Creating organization...",
			"transferringRepository": "Transferring repository to organization...",
			"teamPermissions": "Setting up team permissions...",
			"creatingTeams": "Creating teams...",
			"settingTeamPermissions": "Setting up team permissions...",
			"roleFiles": "Creating role definition files...",
			"discussions": "Enabling Discussions...",
			"cachingCategories": "Caching discussion categories...",
			"discussionsAlreadyEnabled": "Discussions already enabled, skipping...",
			"allSettingsComplete": "Repository settings complete, skipping initialization..."
		},
		"teams": {
			"administrators": {
				"description": "Administrators team - Has full management permissions for the repository"
			},
			"reviewers": {
				"description": "Reviewers team - Responsible for reviewing contributions and granting points through comments"
			},
			"maintainers": {
				"description": "Maintainers team - Responsible for merging PRs and managing contributions, but restricted by CODEOWNERS"
			}
		},
		"errors": {
			"personalRepo": {
				"title": "Personal Repository Not Supported",
				"message": "This application only supports organization repositories. Please use an organization repository or contact the repository administrator."
			},
			"repoCheck": {
				"title": "Repository Check Failed",
				"message": "Unable to check repository type. Please verify that the repository URL is correct."
			},
			"repoNotFound": {
				"title": "Repository Not Found",
				"message": "Repository {owner}/{repo} does not exist or is not public. Please check if the repository URL is correct."
			},
			"repoPrivate": {
				"title": "Private Repository",
				"message": "Cannot access private repository. Please ensure the repository is public or you have access permissions."
			},
			"unauthorized": {
				"title": "Authentication Failed",
				"message": "Authentication failed. Please check if your GitHub Access Token is correct."
			},
			"libsodiumNotLoaded": "libsodium library not loaded"
		}
	},
	"projectDetail": {
		"title": "Project Detail",
		"projectFiles": "Project Files",
		"localWorkspace": "Local Workspace",
		"noFiles": "No files",
		"files": "files",
		"createFile": "Create File",
		"createDirectory": "Create Directory",
		"openFile": "Open",
		"viewFile": "View",
		"deleteFile": "Delete",
		"uploadFile": "Upload File",
		"cannotView": "Cannot View",
		"cannotViewFile": "This file type cannot be viewed",
		"cannotViewDirectory": "Directory cannot be viewed",
		"checkUpdate": "Check Updates",
		"projectInfo": "Project Info",
		"details": "Details",
		"defaultDescription": "Project Description",
		"projectMembers": "Project Members",
		"recentActivity": "Recent Activity",
		"pendingReviews": "Pending Reviews",
		"creator": "Creator",
		"description": "Description",
		"contributors": "Contributors",
		"lastUpdated": "Last Updated",
		"status": "Status",
		"noMembers": "No project members",
		"membersLoadError": "Failed to load members list: {error}",
		"membersLoadHint": "Possible reasons: insufficient permissions or network connection issues",
		"refreshMembers": "Refresh",
		"viewProfile": "View Profile",
		"roleOwner": "Owner",
		"roleDirector": "Director",
		"roleMaintainer": "Maintainer",
		"roleReviewer": "Reviewer",
		"roleCollaborator": "Collaborator",
		"roleVisitor": "Visitor",
		"roleUnknown": "Unknown",
		"pendingDescription": "Here shows the list of pending content reviews.",
		"activityDescription": "Here shows the recent activities of the project, including commits, merges, etc.",
		"active": "Active",
		"inactive": "Inactive",
		"loading": "Loading...",
		"selectFileFirst": "Please select a file first",
		"fileCreated": "File created successfully",
		"fileDeleted": "File deleted successfully",
		"fileUploaded": "File uploaded successfully",
		"operationFailed": "Operation failed",
		"confirmDelete": "Are you sure you want to delete this file?",
		"enterFileName": "Please enter file name",
		"fileOperations": {
			"enterFileName": "Please enter file name (.txt will be added if no extension):",
			"defaultFileName": "new-file",
			"fileNameInvalid": "Invalid file name! Please use letters, numbers, underscores, hyphens and dots.",
			"fileExists": "File already exists!",
			"fileCreated": "File \"{fileName}\" created successfully!",
			"fileCreateFailed": "Failed to create file: {error}",
			"enterDirName": "Please enter directory name:",
			"defaultDirName": "new-directory",
			"dirNameInvalid": "Invalid directory name! Please use letters, numbers, underscores, hyphens.",
			"dirExists": "Directory already exists!",
			"dirCreated": "Directory \"{dirName}\" created successfully!",
			"dirCreateFailed": "Failed to create directory: {error}",
			"fileExistsOverwrite": "File \"{fileName}\" already exists, overwrite?",
			"fileTooLarge": "File \"{fileName}\" is too large! File size cannot exceed 40MB. Current size: {fileSize}MB",
			"unsupportedFileType": "Unsupported file type: {fileName}",
			"uploadSuccess": "Successfully uploaded {successCount} files{errorText}",
			"uploadErrorText": ", {errorCount} files failed to upload",
			"uploadFailed": "File upload failed!",
			"uploadError": "File upload failed: {error}",
			"projectUpToDate": "Project is up to date!",
			"newVersionFound": "New version found!",
			"latestCommit": "Latest commit: {message}",
			"committer": "Committer: {author}",
			"commitTime": "Time: {time}",
			"syncConfirm": "Sync immediately?",
			"checkUpdateFailed": "Check update failed: {error}",
			"checking": "Checking...",
			"syncInDevelopment": "Sync feature is under development...",
			"syncing": "Syncing project, please wait...",
			"syncSuccess": "Project synced successfully!",
			"syncFailed": "Sync failed: {error}",
			"selectFileFirst": "Please select a file to delete first!",
			"confirmDeleteFile": "Are you sure you want to delete file \"{fileName}\"?\n\nNote: Deleted files cannot be recovered!",
			"confirmDeleteDir": "Are you sure you want to delete directory \"{dirName}\"?\n\nNote: Deleted directories cannot be recovered!",
			"confirmDeleteBothFile": "Are you sure you want to delete file \"{fileName}\"?\n\nThis file exists in both local workspace and file cache.\nWill delete in two steps: first local version, then cache version.\n\nNote: Deleted files cannot be recovered!",
			"confirmDeleteBothDir": "Are you sure you want to delete directory \"{dirName}\"?\n\nThis directory exists in both local workspace and file cache.\nWill delete in two steps: first local version, then cache version.\n\nNote: Deleted directories cannot be recovered!",
			"deleteSuccess": "File \"{fileName}\" deleted successfully.",
			"deleteLocalSuccess": "Local edited version deleted, file \"{fileName}\" remains in directory.",
			"deleteCacheSuccess": "File \"{fileName}\" deleted from cache.",
			"deleteBothSuccess": "File \"{fileName}\" has been completely deleted from both local workspace and file cache.",
			"fileDeleted": "File \"{fileName}\" deleted successfully!",
			"dirDeleted": "Directory \"{dirName}\" deleted successfully!",
			"deleteFailed": "Delete failed: {error}",
			"modalTitles": {
				"createFile": "Create File",
				"createDir": "Create Directory",
				"confirmDelete": "Confirm Delete",
				"confirmOverwrite": "Confirm Overwrite",
				"confirmSync": "Confirm Sync",
				"fileTooLarge": "File Too Large",
				"unsupportedFile": "Unsupported File Type",
				"updateAvailable": "Update Available",
				"alreadyLatest": "Project Up to Date",
				"syncSuccess": "Sync Success",
				"syncFailed": "Sync Failed",
				"uploadSuccess": "Upload Success",
				"uploadFailed": "Upload Failed",
				"error": "Error",
				"success": "Success",
				"warning": "Warning",
				"info": "Information"
			}
		},
		"enterDirectoryName": "Please enter directory name",
		"errors": {
			"userConfigMissing": "User configuration or repository information missing",
			"invalidRepositoryUrl": "Invalid repository URL",
			"loadProjectDataFailed": "Failed to load project data",
			"renderFileListFailed": "Failed to render file list",
			"loadFileListFailed": "Failed to load file list",
			"openFileFailed": "Failed to open file",
			"createFileFailed": "Failed to create file",
			"createDirectoryFailed": "Failed to create directory",
			"deleteFailed": "Delete failed",
			"uploadFileFailed": "Failed to upload file",
			"checkDirectoryFilesFailed": "Failed to check directory files",
			"userNotLoggedIn": "User not logged in",
			"repositoryInfoUnavailable": "Repository information or access token unavailable",
			"cannotParseProjectUrl": "Cannot parse project URL",
			"userNotLoggedInOrTokenUnavailable": "User not logged in or access token unavailable",
			"cannotGetLatestCommit": "Cannot get latest commit information"
		},
		"ui": {
			"unknownProject": "Unknown Project",
			"noDescription": "No description",
			"localWorkspace": "Local Workspace",
			"projectInfo": "Project Info",
			"repository": "Repository",
			"unknown": "Unknown",
			"repositoryUrl": "Repository URL:",
			"createTime": "Create Time:",
			"programmingLanguage": "Programming Language:",
			"openSourceLicense": "Open Source License:",
			"status": "Status:",
			"noPendingReviews": "No pending reviews",
			"loading": "Loading...",
			"retry": "Retry loading",
			"newFileContent": "This is a new file.",
			"ifFileShowOpen": "If it's a file, show [Open] button",
			"ifDirectoryShowDelete": "If it's a directory, only show [Delete] button",
			"noFileSelectedHideButtons": "Hide all buttons when no file is selected",
			"saveFileInfoToLocalStorage": "Save current file info to localStorage for editor page",
			"navigateToEditor": "Navigate to editor page"
		},
		"time": {
			"justNow": "Just now",
			"minutesAgo": "minutes ago",
			"hoursAgo": "hours ago",
			"daysAgo": "days ago"
		},
		"validation": {
			"fileNameEmpty": "File name cannot be empty",
			"fileNameContainsSeparator": "File name cannot contain path separators",
			"fileNameTooLong": "File name too long",
			"directoryNameEndsWithSlash": "Directory name cannot end with slash"
		},
		"confirmations": {
			"deleteFile": "Are you sure you want to delete {path}?"
		},
		"prompts": {
			"enterFileName": "Please enter file name:",
			"enterDirectoryName": "Please enter directory name:"
		},
		"messages": {
			"checkingUpdates": "Checking for updates...",
			"noUpdatesAvailable": "Already up to date",
			"checkUpdateFailed": "Check updates failed",
			"updateAvailable": "New version available!\n\nLatest commit: {commitMessage}\nCommit date: {commitDate}\nLast sync: {lastSyncDate}",
			"confirmSync": "Do you want to sync the latest version?",
			"syncing": "Syncing...",
			"syncComplete": "Sync completed",
			"syncFailed": "Sync failed"
		}
	},
	"editor": {
		"title": "Editor",
		"fileInfo": "File Info",
		"editHistory": "Edit History",
		"collaboration": "Collaboration",
		"save": "💾 Save",
		"preview": "👁 Preview",
		"edit": "✏️ Edit",
		"history": "📜 History",
		"collaborate": "👥 Collaborate",
		"submitReview": "📤 Submit Review",
		"submitModal": {
			"title": "Submit Review",
			"message": "Please enter a message for maintainers (optional):",
			"placeholder": "Please enter a message..."
		},
		"lastModified": "Last Modified",
		"modifier": "Modifier",
		"loading": "Loading...",
		"noContent": "No content",
		"fileSaved": "File saved successfully",
		"saveFailed": "Save failed",
		"submitSuccess": "Review submitted successfully",
		"submitFailed": "Failed to submit review",
		"submitting": "Submitting...",
		"commitMessage": "Update file via DIPCP: ",
		"submitNotImplemented": "Submit review feature not implemented",
		"saveNotImplemented": "Save file feature not implemented",
		"image": {
			"fileName": "File Name",
			"filePath": "Path",
			"mode": "Mode",
			"viewOnly": "View Only"
		},
		"unsavedChanges": "You have unsaved changes",
		"confirmLeave": "Are you sure you want to leave? Unsaved changes will be lost",
		"infoPanel": {
			"fileName": "File Name",
			"filePath": "File Path",
			"fileSize": "File Size",
			"lastModified": "Last Modified",
			"characters": "characters",
			"createFile": "Create File",
			"editContent": "Edit Content",
			"online": "Online",
			"offline": "Offline",
			"otherUsers": "Other Users"
		},
		"errors": {
			"cannotGetFilePath": "Cannot get file path",
			"fileNotFound": "File not found",
			"loadFileFailed": "Failed to load file",
			"userConfigMissing": "User configuration or repository information missing",
			"invalidRepositoryInfo": "Invalid repository information",
			"fetchFromGitHubFailed": "Failed to fetch file from GitHub",
			"loadEditHistoryFailed": "Failed to load edit history",
			"autoSaveSuccess": "Auto save successful",
			"autoSaveFailed": "Auto save failed",
			"saveSuccess": "Save successful",
			"saveFailed": "Save failed",
			"submitFailed": "Submit failed",
			"fileModifiedConfirm": "File has been modified, save before submitting?",
			"submitReviewInDevelopment": "Submit review feature is under development...",
			"unsavedChangesConfirm": "You have unsaved changes, are you sure you want to leave?",
			"unsavedChangesSaveConfirm": "You have unsaved changes, do you want to save?",
			"userNotLoggedInOrTokenUnavailable": "User not logged in or access token unavailable",
			"repositoryInfoUnavailable": "Repository information unavailable",
			"filePathMissing": "File path missing"
		},
		"ui": {
			"startWriting": "Start writing content...",
			"loading": "Loading...",
			"error": "Error",
			"saveWithAsterisk": "Save*",
			"save": "Save",
			"project": "Project",
			"unknown": "Unknown",
			"modifier": "Modifier:",
			"modified": "Modified",
			"saved": "Saved",
			"justNow": "Just now",
			"minutesAgo": "minutes ago",
			"hoursAgo": "hours ago",
			"daysAgo": "days ago",
			"navigateTo": "Navigate to:",
			"text": "Text:",
			"fileInfo": "File Info",
			"editHistory": "Edit History",
			"collaboration": "Collaboration",
			"info": "Info",
			"loadEditHistoryFailed": "Failed to load edit history"
		},
		"time": {
			"unknown": "Unknown",
			"justNow": "Just now",
			"minutesAgo": "minutes ago",
			"hoursAgo": "hours ago",
			"daysAgo": "days ago"
		},
		"findReplace": {
			"find": "Find:",
			"replaceWith": "Replace with:",
			"replacedCount": "Replaced {count} occurrences",
			"noMatchFound": "No matching text found"
		},
		"gotoLine": {
			"invalidLineNumber": "Invalid line number"
		}
	},
	"reviews": {
		"title": "Reviews Page",
		"subtitle": "Manage and review user submissions",
		"pendingReviews": "Pending Reviews",
		"reviewed": "Reviewed",
		"approved": "Approved",
		"rejected": "Rejected",
		"totalReviews": "Total Reviews",
		"reviewList": "Review List",
		"submitter": "Submitter",
		"submitTime": "Submit Time",
		"reviewer": "Reviewer",
		"reviewTime": "Review Time",
		"reviewComment": "Review Comment",
		"approve": "Approve",
		"reject": "Reject",
		"viewDetails": "View Details",
		"reviewSuccess": "Review completed",
		"reviewFailed": "Review failed",
		"noReviews": "No reviews available",
		"notImplemented": {
			"approve": "Approve functionality not implemented",
			"reject": "Reject functionality not implemented",
			"comment": "Add comment functionality not implemented"
		}
	},
	"maintainers": {
		"title": "Maintainers Page",
		"subtitle": "Manage and maintain project content",
		"pendingMaintainers": "Pending Maintenance",
		"maintained": "Maintained",
		"approved": "Approved",
		"rejected": "Rejected",
		"totalMaintainers": "Total Maintenance",
		"maintainerList": "Maintainer List",
		"maintainer": "Maintainer",
		"maintainTime": "Maintain Time",
		"maintainComment": "Maintain Comment",
		"approve": "Approve",
		"reject": "Reject",
		"allowMerge": "Allow Merge",
		"rejectMerge": "Reject Merge",
		"viewDetails": "View Details",
		"maintainSuccess": "Maintenance completed",
		"maintainFailed": "Maintenance failed",
		"noMaintainers": "No maintenance available",
		"selectCommitSize": "Commit Size",
		"selectImpactMultiplier": "Impact Multiplier",
		"commitSize": "Commit Size",
		"impactMultiplier": "Impact Multiplier",
		"addComment": "Add Comment",
		"commentPlaceholder": "Add comment...",
		"errors": {
			"apiNotConfigured": "GitHub API not configured",
			"commentRequired": "Please enter a comment first",
			"fieldsRequired": "Please select: {fields}",
			"commentFailed": "Failed to add comment: {error}",
			"approveFailed": "Merge failed: {error}",
			"rejectFailed": "Reject failed: {error}"
		},
		"discussion": {
			"approvedTitle": "Merge Review Approved",
			"rejectedTitle": "Merge Review Rejected",
			"maintainer": "Maintainer:",
			"commitSize": "Commit Size:",
			"impactMultiplier": "Impact Multiplier:",
			"reviewComment": "Review Comment:",
			"rejectionReason": "Rejection Reason:",
			"relatedPR": "Related PR:"
		},
		"notImplemented": {
			"approve": "Approve functionality not implemented",
			"reject": "Reject functionality not implemented",
			"comment": "Add comment functionality not implemented"
		}
	},
	"settings": {
		"title": "Settings",
		"language": "Language Settings",
		"account": "Account Settings",
		"notifications": "Notification Settings",
		"emailNotifications": "Email Notifications",
		"systemNotifications": "System Notifications",
		"about": "About",
		"selectLanguage": "Select Language",
		"selectTheme": "Select Theme",
		"followSystem": "Follow System",
		"chinese": "中文",
		"english": "English",
		"japanese": "日本語",
		"settingsSaved": "Settings saved",
		"settingsFailed": "Failed to save settings",
		"sync": "Sync Settings",
		"syncInterval": "Sync interval (seconds)",
		"min": "Min",
		"max": "Max",
		"theme": {
			"title": "Theme Settings",
			"lightDesc": "Suitable for daytime use",
			"darkDesc": "Suitable for nighttime use"
		},
		"logoutUser": {
			"button": "Logout User",
			"confirmTitle": "Confirm Logout User",
			"warningTitle": "Important Notice",
			"warningMessage": "After logging out, user-related data will be permanently deleted, including:",
			"warningItem1": "• User login information",
			"warningItem2": "• Saved login credentials",
			"warningItem3": "• Repository access history",
			"warningItem4": "• All local workspace data",
			"note": "Note: Personal settings (language, theme, etc.) will be preserved",
			"warningNote": "This action cannot be undone, please proceed with caution!"
		}
	},
	"theme": {
		"dark": "Dark Theme",
		"light": "Light Theme",
		"darkMode": "Dark Mode",
		"lightMode": "Light Mode"
	},
	"dashboard": {
		"title": "Dashboard",
		"welcome": "Welcome to DIPCP!",
		"subtitle": "Serverless Project Contribution Platform",
		"exitProject": "Exit Project",
		"totalPoints": "Total Points",
		"myContributions": "My Contributions",
		"pendingReviews": "Pending Reviews",
		"approvedContributions": "Approved",
		"quickActions": "Quick Actions",
		"newContribution": "New Contribution",
		"viewProjectDetail": "Project Detail",
		"viewReviews": "View Reviews",
		"settings": "Settings",
		"recentActivity": "Recent Activity",
		"activity1": "You submitted a new document: DIPCP Technical Design Document v1.1",
		"activity2": "Your contribution 'Fix login page' has been merged, earned 10 points",
		"activity3": "Reviewer 'reviewer-1' commented on your contribution 'Optimize theme switching'",
		"time1": "2 hours ago",
		"time2": "1 day ago",
		"time3": "2 days ago",
		"noProjects": "No projects available",
		"noActivity": "No recent activity",
		"application": {
			"title": "Become a Contributor",
			"description": "Apply to become a project contributor and participate in content creation and project maintenance.",
			"applyButton": "Apply to Contribute",
			"pendingTitle": "Application Submitted",
			"pendingMessage": "Your contributor application is under review, please wait patiently.",
			"checkStatusButton": "Check Review Status",
			"modalTitle": "Apply to Become a Contributor",
			"reviewing": {
				"title": "Under Review",
				"message": "Your application is being processed, it will take about 1 minute...",
				"details": "Issue #{issueNumber} created<br>GitHub Actions is automatically processing your application",
				"processing": "Processing your application, please wait...",
				"workflowRunning": "GitHub Actions workflow is running...",
				"acceptingInvitation": "Accepting collaborator invitation...",
				"finalizing": "Finalizing setup..."
			}
		},
		"userRole": {
			"title": "User Role",
			"owner": "Owner",
			"director": "Director",
			"maintainer": "Maintainer",
			"reviewer": "Reviewer",
			"collaborator": "Collaborator",
			"visitor": "Visitor"
		},
		"logout": {
			"confirmTitle": "Confirm Exit Project",
			"warningTitle": "Important Notice",
			"warningMessage": "After exiting, all uncommitted local data will be permanently deleted, including:",
			"warningItem1": "• Locally edited file contents",
			"warningItem2": "• New files that haven't been committed",
			"warningItem3": "• All modifications in local workspace",
			"warningItem4": "• User access token and cache data",
			"warningNote": "Please ensure you have saved all important changes before exiting!",
			"confirmButton": "Confirm Exit"
		},
		"errors": {
			"invalidRepositoryUrl": "Invalid repository URL"
		}
	},
	"github": {
		"auth": {
			"title": "GitHub Authentication",
			"message": "Please enter your GitHub Personal Access Token for authentication:",
			"instructions": "How to get it:<br>1. Visit <a href=\"https://github.com/settings/tokens\" target=\"_blank\">https://github.com/settings/tokens</a><br>2. Click \"Generate new token (classic)\"<br>3. Select \"public_repo\" permission<br>4. Copy the generated token",
			"placeholder": "ghp_xxxxxxxxxxxxxxxxxxxx"
		}
	},
	"notifications": {
		"success": "Success",
		"error": "Error",
		"warning": "Warning",
		"info": "Info",
		"operationSuccess": "Operation successful",
		"operationFailed": "Operation failed",
		"networkError": "Network error",
		"fileNotFound": "File not found",
		"permissionDenied": "Permission denied",
		"invalidInput": "Invalid input",
		"saveSuccess": "Save successful",
		"saveFailed": "Save failed",
		"deleteSuccess": "Delete successful",
		"deleteFailed": "Delete failed"
	},
	"activityList": {
		"noActivities": "No activity records"
	},
	"time": {
		"justNow": "Just now",
		"minutesAgo": "{minutes} minutes ago",
		"hoursAgo": "{hours} hours ago",
		"daysAgo": "{days} days ago"
	},
	"collaboration": {
		"currentStatus": "Current Status:",
		"localWorkspace": "Local Workspace:",
		"modified": "Modified",
		"saved": "Saved",
		"hasUncommittedChanges": "Has uncommitted changes",
		"workspaceClean": "Workspace clean"
	},
	"fileInfo": {
		"fileName": "File Name:",
		"fileType": "File Type:",
		"fileSize": "File Size:",
		"lastModified": "Last Modified:",
		"unknown": "Unknown"
	},
	"statusBar": {
		"line": "Line {current}/{total}",
		"size": "Size {size}",
		"status": "Status {status}"
	},
	"editHistory": {
		"noHistory": "No edit history"
	},
	"member": {
		"contributions": "{count} contributions"
	},
	"members": {
		"noMembers": "No member information"
	},
	"footer": {
		"copyright": "© 2025 DIPCF. All rights reserved.",
		"backLink": "Back to Login Page"
	},
	"userProfile": {
		"loadError": "Load Failed",
		"retry": "Retry",
		"repositories": "Repositories",
		"followers": "Followers",
		"following": "Following",
		"contributionStats": "Contribution Statistics",
		"totalContributions": "Total Contributions",
		"contributionStreak": "Contribution Streak",
		"days": "days",
		"starsReceived": "Stars Received",
		"forksReceived": "Forks Received",
		"recentActivity": "Recent Activity",
		"noRecentActivity": "No Recent Activity",
		"inviteMaintainer": "Invite as Maintainer",
		"inviteReviewer": "Invite as Reviewer",
		"inviteDirector": "Invite as Director",
		"inviteSent": "Invitation sent",
		"errors": {
			"notLoggedIn": "Please log in first",
			"noRepository": "Repository information not configured",
			"inviteFailed": "Failed to send invitation: {error}",
			"userNotLoggedInOrTokenUnavailable": "User not logged in or access token unavailable"
		}
	},
	"roleManagement": {
		"title": "Project Permission Settings",
		"status": {
			"saved": "Saved",
			"unsaved": "Unsaved",
			"error": "Error",
			"loading": "Loading"
		},
		"branchProtection": {
			"title": "Branch Protection Rules",
			"branchName": "Branch Name",
			"addBranch": "Add Branch",
			"protectionRules": "Protection Rules",
			"requirePR": "Require pull request reviews before merging",
			"requireCodeOwners": "Require review from code owners",
			"dismissStaleReviews": "Dismiss stale reviews when new commits are pushed",
			"requireStatusChecks": "Require status checks to pass before merging",
			"requireUpToDate": "Require branches to be up to date before merging",
			"restrictPushes": "Restrict pushes that create files",
			"advancedSettings": "Advanced Settings",
			"requiredReviewers": "Required number of reviewers",
			"requiredCodeOwners": "Required code owners",
			"requiredStatusChecks": "Required status checks",
			"addStatusCheck": "Add Status Check"
		},
		"codeOwners": {
			"title": "Code Owners Configuration (CODEOWNERS)",
			"globalOwners": "Global Owners",
			"specificRules": "Specific File/Directory Rules",
			"pathPattern": "Path Pattern",
			"owners": "Owners",
			"addRule": "Add Rule",
			"previewFile": "Preview CODEOWNERS File"
		},
		"teamPermissions": {
			"title": "Team Permission Assignment",
			"teamName": "Team Name",
			"permissionLevel": "Permission Level",
			"addTeam": "Add Team",
			"noTeams": "No teams available",
			"read": "Read",
			"triage": "Triage",
			"write": "Write",
			"maintain": "Maintain",
			"admin": "Admin"
		},
		"modals": {
			"addTeam": {
				"title": "Add Team Permission",
				"selectTeam": "Select Team",
				"permissionLevel": "Permission Level",
				"devTeam": "Developer Team",
				"techLeadTeam": "Tech Lead Team",
				"maintainerTeam": "Maintainer Team",
				"read": "Read",
				"triage": "Triage",
				"write": "Write",
				"maintain": "Maintain",
				"admin": "Admin",
				"permissionDescription": "Permission Description",
				"writeDesc": "Can push code, create branches, manage Issues and PRs",
				"maintainDesc": "Can manage repository, but cannot modify sensitive settings",
				"adminDesc": "Has full administrative permissions, can modify repository settings",
				"readDesc": "Can only view code, cannot modify",
				"triageDesc": "Can manage Issues and PRs, but cannot push code",
				"addTeam": "Add Team"
			},
			"preview": {
				"title": "Permission Settings Preview",
				"branchProtection": "Branch Protection Rules",
				"branchProtected": "branch protection enabled",
				"requirePR": "Require PR review before merging",
				"requireCodeOwners": "Require code owner review",
				"codeOwners": "Code Owners",
				"globalOwners": "Global Owners",
				"specificRules": "Specific File Rules",
				"rules": "rules",
				"teamPermissions": "Team Permissions",
				"permission": "permission",
				"backToEdit": "Back to Edit"
			}
		},
		"errors": {
			"teamExists": "This team already exists",
			"selectTeam": "Please select a team",
			"addTeamFailed": "Failed to add team: {error}",
			"removeTeamFailed": "Failed to remove team: {error}",
			"updatePermissionFailed": "Failed to update permission: {error}",
			"githubTokenNotFound": "GitHub token not found"
		},
		"confirm": {
			"removeTeam": "Are you sure you want to remove this team?",
			"reset": "Are you sure you want to reset all settings? This will lose all unsaved changes."
		},
		"messages": {
			"saveSuccess": "Settings saved successfully",
			"saveError": "Save failed: {error}"
		}
	},
	"discussions": {
		"title": "Discussions",
		"searchPlaceholder": "Search discussions...",
		"newDiscussion": "New Discussion",
		"sort": {
			"latest": "Latest",
			"hottest": "Hottest",
			"replies": "Most Replies"
		},
		"category": {
			"general": "General Discussion",
			"ideas": "Ideas and Suggestions",
			"polls": "Polls",
			"qna": "Q&A",
			"showAndTell": "Show and tell",
			"announcements": "Announcements"
		},
		"noDiscussions": "No discussions in this category",
		"empty": "No discussions",
		"selectDiscussion": "Please select a discussion to view details",
		"backToList": "Back to Discussions",
		"edit": "Edit",
		"delete": "Delete",
		"replies": "Replies",
		"addReply": "Add a reply...",
		"submitReply": "Submit Reply",
		"scrollToTop": "Scroll to Top",
		"noReplies": "No replies yet",
		"like": "Like",
		"createNew": "Create New Discussion",
		"categoryLabel": "Category",
		"titleLabel": "Title",
		"titlePlaceholder": "Enter discussion title...",
		"contentLabel": "Content",
		"contentPlaceholder": "Enter discussion content (Markdown supported)...",
		"replyEmpty": "Reply content cannot be empty",
		"replySubmitted": "Reply submitted",
		"replyFailed": "Failed to submit reply",
		"titleRequired": "Title cannot be empty",
		"contentRequired": "Content cannot be empty",
		"created": "Discussion created",
		"createFailed": "Failed to create discussion",
		"featureNotImplemented": "This feature is not implemented yet",
		"confirmDeleteComment": "Are you sure you want to delete this comment?",
		"close": "Close Discussion",
		"closed": "Closed",
		"confirmClose": "Are you sure you want to close this discussion?",
		"closeFailed": "Failed to close discussion",
		"timeAgo": {
			"justNow": "Just now",
			"minutes": "{minutes} minutes ago",
			"hours": "{hours} hours ago",
			"days": "{days} days ago",
			"weeks": "{weeks} weeks ago",
			"months": "{months} months ago"
		},
		"invitation": {
			"title": "Role Invitation",
			"description": "You have received a role invitation. Please choose to accept or reject it",
			"accept": "Accept Invitation",
			"reject": "Reject Invitation",
			"accepted": "Invitation accepted! GitHub Actions will automatically process your request.",
			"rejected": "Invitation rejected.",
			"acceptFailed": "Failed to accept invitation: {error}",
			"rejectFailed": "Failed to reject invitation: {error}"
		}
	},
	"issues": {
		"title": "Issues",
		"newIssue": "+ New Issue",
		"searchPlaceholder": "🔍 Search or jump to...",
		"filters": "Filters▼",
		"labels": "Labels▼",
		"sort": "Sort▼",
		"open": "Open",
		"opened": "opened",
		"closed": "closed",
		"close": "Closed",
		"by": "by",
		"comments": "comments",
		"noIssues": "No Issues",
		"backToList": "Back to Issues",
		"writeComment": "💬 Write a comment...",
		"format": "🎨 Format",
		"attachFiles": "📎 Attach files",
		"comment": "💬 Comment",
		"assignees": "Assignees",
		"assignYourself": "assign yourself",
		"edit": "edit",
		"addToProject": "add to project",
		"addToMilestone": "add to milestone",
		"projects": "Projects",
		"milestone": "Milestone",
		"today": "today",
		"yesterday": "yesterday",
		"daysAgo": "days ago",
		"weeksAgo": "weeks ago",
		"monthsAgo": "months ago",
		"page": "📄 Page 1",
		"noComments": "No comments yet"
	},
	"repositorySelection": {
		"title": "Select Repository",
		"subtitle": "Choose an existing repository or create a new one",
		"tabs": {
			"recent": "Recent Repositories",
			"existing": "Select Existing Repository",
			"create": "Create New Repository"
		},
		"recent": {
			"title": "Recently Visited Repositories",
			"empty": "No access history",
			"noDescription": "No description",
			"lastAccessed": "Last accessed",
			"select": "Select"
		},
		"existing": {
			"title": "Available Repository List",
			"loading": "Loading repository list...",
			"error": "Failed to load",
			"empty": "No available repositories",
			"retry": "Retry",
			"createdAt": "Created at",
			"select": "Select",
			"noDescription": "No description"
		},
		"history": {
			"title": "Recently Visited Repositories",
			"noHistory": "No history available",
			"lastAccessed": "Last accessed:"
		},
		"urlInput": {
			"title": "Or enter repository address",
			"label": "GitHub Repository URL",
			"placeholder": "https://github.com/owner/repo",
			"help": "Please enter the complete GitHub repository address"
		},
		"create": {
			"title": "Create New Repository",
			"ownerLabel": "Repository Owner",
			"ownerPlaceholder": "Organization name (required)",
			"ownerHelp": "Organization name is required; personal repositories are not supported",
			"nameLabel": "Repository Name",
			"namePlaceholder": "English letters and numbers, max 100 characters",
			"descriptionLabel": "Repository Description",
			"descriptionPlaceholder": "Brief description of the repository, max 350 characters"
		},
		"continue": {
			"button": "Continue",
			"loading": "Processing...",
			"success": "Processing Complete!"
		},
		"syncing": "Syncing files...",
		"errors": {
			"notLoggedIn": "Please log in first",
			"repoExists": "Repository name already exists",
			"noRepoName": "Please enter repository name",
			"repoNameTooLong": "Repository name cannot exceed 100 characters",
			"repoNameInvalid": "Repository name can only contain English letters and numbers",
			"repoNameEmpty": "Repository name cannot be empty",
			"repoDescriptionTooLong": "Repository description cannot exceed 350 characters",
			"ownerNotFound": "The specified user or organization does not exist",
			"cannotCreateForOtherUser": "Cannot create repository under other user accounts",
			"noOrgPermission": "You do not have permission to create repositories in this organization"
		}
	},
	"cla": {
		"title": "Contributor License Agreement",
		"content": "As a contributor to the DIPCP platform, you need to sign a Contributor License Agreement to transfer intellectual property ownership completely to the DIPCF Foundation. The foundation will uniformly manage and be responsible for the maintenance and operation of intellectual property. Please read through before signing the agreement.",
		"realNameLabel": "Please enter your real name",
		"realNamePlaceholder": "Please enter your real name (for legal documents)",
		"agree": "Agree and Sign",
		"disagree": "Disagree",
		"rejected": "User refused to sign CLA agreement",
		"signingRecord": "CLA Signing Record",
		"signer": "Signer",
		"signingTime": "Signing Time",
		"repository": "Repository",
		"agreementContent": "CLA Agreement Content",
		"signingConfirmation": "Signing Confirmation",
		"signingStatement": "I, **{realName}** (GitHub username: {username}), confirm that I have read and agree to all terms of the above Contributor License Agreement.",
		"signerRealName": "Signer Real Name",
		"githubUsername": "GitHub Username",
		"email": "Email",
		"notProvided": "Not provided",
		"autoGenerated": "This file is automatically generated by DIPCP system",
		"errors": {
			"noRealName": "Please enter your real name"
		}
	}
}